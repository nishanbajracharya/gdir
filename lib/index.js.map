{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["#! /usr/bin/env node\n\nconst chalk = require('chalk');\nconst Table = require('cli-table');\nconst { program, Option } = require('commander');\n\nconst { getStatus, getCurrentBranch, isBranch } = require('./git');\nconst {\n  hasDirectory,\n  getDirectories,\n  getDirectoryNameFromPath,\n} = require('./dir');\n\nconst GIT_DIR = '.git';\n\ntry {\n  program\n    .option('-p, --path <value>', 'Path of directory to check repos in', '.')\n    .option('-b, --branch <value>', 'Git branch to filter', '')\n    .addOption(\n      new Option('-t, --type <value>', 'Show current branch or status')\n        .choices(['branch', 'status'])\n        .default('branch')\n    )\n    .parse();\n\n  const options = program.opts();\n\n  program\n    .arguments('[path] [branch]')\n    .description('Arguments', {\n      path: 'Path of directory to check repos in',\n      branch: 'Git branch to filter',\n    })\n    .action((path, branch) => {\n      if (path) {\n        options.path = path;\n      }\n\n      if (branch) {\n        options.branch = branch;\n      }\n    })\n    .parse();\n\n  const directories = getDirectories(options.path);\n\n  const gitDirectories = directories.filter((dir) =>\n    hasDirectory(dir, GIT_DIR)\n  );\n\n  const filteredDirectories = gitDirectories.filter((dir) =>\n    isBranch(dir, options.branch)\n  );\n\n  function display(type) {\n    const table = new Table();\n\n    filteredDirectories.forEach((dir) =>\n      table.push([\n        chalk.bold.green(getDirectoryNameFromPath(dir)),\n        type === 'status' ? getStatus(dir) : getCurrentBranch(dir),\n      ])\n    );\n\n    console.log(table.toString());\n  }\n\n  display(options.type);\n} catch (e) {\n  console.log(\n    chalk.bold.redBright('An error occured! Make sure your path is correct.')\n  );\n\n  const table = new Table();\n\n  table.push([e.message]);\n  console.log(table.toString());\n}\n"],"names":["chalk","require","Table","program","Option","getStatus","getCurrentBranch","isBranch","hasDirectory","getDirectories","getDirectoryNameFromPath","option","addOption","choices","parse","options","opts","arguments","description","path","branch","action","filteredDirectories","filter","dir","type","table","forEach","push","bold","green","console","log","toString","display","e","redBright","message"],"mappings":";AAEA,IAAMA,EAAQC,QAAQ,SAChBC,EAAQD,QAAQ,eACMA,QAAQ,aAA5BE,IAAAA,QAASC,IAAAA,SAEiCH,QAAQ,SAAlDI,IAAAA,UAAWC,IAAAA,iBAAkBC,IAAAA,WAKjCN,QAAQ,SAHVO,IAAAA,aACAC,IAAAA,eACAC,IAAAA,yBAKF,IACEP,EACGQ,OAAO,qBAAsB,sCAAuC,KACpEA,OAAO,uBAAwB,uBAAwB,IACvDC,UACC,IAAIR,EAAO,qBAAsB,iCAC9BS,QAAQ,CAAC,SAAU,mBACX,WAEZC,QAEH,IAAMC,EAAUZ,EAAQa,OAExBb,EACGc,UAAU,mBACVC,YAAY,YAAa,CACxBC,KAAM,sCACNC,OAAQ,yBAETC,OAAO,SAACF,EAAMC,GACTD,IACFJ,EAAQI,KAAOA,GAGbC,IACFL,EAAQK,OAASA,KAGpBN,QAEH,IAMMQ,EANcb,EAAeM,EAAQI,MAERI,OAAO,SAACC,UACzChB,EAAagB,EAnCD,UAsC6BD,OAAO,SAACC,UACjDjB,EAASiB,EAAKT,EAAQK,WAGxB,SAAiBK,GACf,IAAMC,EAAQ,IAAIxB,EAElBoB,EAAoBK,QAAQ,SAACH,UAC3BE,EAAME,KAAK,CACT5B,EAAM6B,KAAKC,MAAMpB,EAAyBc,IACjC,WAATC,EAAoBpB,EAAUmB,GAAOlB,EAAiBkB,OAI1DO,QAAQC,IAAIN,EAAMO,YAGpBC,CAAQnB,EAAQU,MAChB,MAAOU,GACPJ,QAAQC,IACNhC,EAAM6B,KAAKO,UAAU,sDAGvB,IAAMV,EAAQ,IAAIxB,EAElBwB,EAAME,KAAK,CAACO,EAAEE,UACdN,QAAQC,IAAIN,EAAMO"}